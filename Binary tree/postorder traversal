// 1st approach (recursive)
void postor(Node* root, vector<int> &v){
        if(root==NULL)
        return;
        
       
        postor(root->left,v);
        
        postor(root->right,v);
         v.push_back(root->data);
        
    }
//Function to return a list containing the postorder traversal of the tree.
vector <int> postOrder(Node* root)
{
  // Your code here
   vector<int>v;
  postor(root,v);
        return v;
}

// 2nd approach(iterative)
vector <int> postOrder(Node* root)
{
  // Your code here
   vector<int>v;
   stack<Node*>q;
   stack<int>s;
   if(root==NULL)
   return v;
   q.push(root);
   while(!q.empty()){
       Node* current = q.top();
       q.pop();
       s.push(current->data);
       
       if(current->left)
       q.push(current->left);
       if(current->right)
       q.push(current->right);
       
   }
   while(!s.empty()){
       v.push_back(s.top());
       s.pop();
   }
        return v;
}

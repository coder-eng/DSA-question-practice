//1st approach(iterative)
vector <int> preorder(Node* root)
{
  // Your code here
   vector<int>v;
   stack<Node*>s;
   queue<int>q;
   if(root==NULL)
   return v;
   s.push(root);
   while(!s.empty()){
       Node* current = s.top();
       s.pop();
       q.push(current->data);
       if(current->right)
       s.push(current->right);
       if(current->left)
       s.push(current->left);
       
       
   }
   while(!q.empty()){
       v.push_back(q.front());
       q.pop();
   }
        return v;
}

//2nd approach(recursive)
void preor(Node* root, vector<int> &v){
        if(root==NULL)
        return;
        
        v.push_back(root->data);
        preor(root->left,v);
        
        preor(root->right,v);
        
    }

//Function to return a list containing the preorder traversal of the tree.
vector <int> preorder(Node* root)
{
  // Your code here
  vector<int>v;
  preor(root,v);
        return v;
        
}
